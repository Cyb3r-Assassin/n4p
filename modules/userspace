#!/bin/bash
#######################################
# Building a sane working environment #
#######################################
DIR_CONF=/etc/n4p/
DIR_LOGO=/usr/share/n4p/

setupenv()
{
    [[ -n $(rfkill list | grep yes) ]] && rfkill unblock wlan
}

#Use these functions to retrieve properties
get_name() # Retrieve the config values
{
    USE=$(grep $1 ${DIR_CONF}n4p.conf | awk -F= '{print $2}')
}

get_state() # Retrieve the state of interfaces
{
    STATE=$(ip addr list | grep -i $1 | grep -i DOWN | awk -Fstate '{print $2}' | cut -d ' ' -f 2)
}

get_inet() # Retrieve the ip of the interface
{
    INET=$(ip addr list | grep -i $1 | grep -i inet | awk '{print $2}')
}

get_RCstatus() # What is the status from OpenRC of the service
{
    STATUS=$(/etc/init.d/$1 status | sed 's/* status: //g' | cut -d ' ' -f 2)
}

depends()
{
    get_name "TYPE="; TYPE=$USE
    get_name "OS="; OS=$USE
    get_name "NETWORKMANAGER="; NETWORKMANAGER=$USE
    get_name "IFACE0="; IFACE0=$USE
    get_name "IFACE1="; IFACE1=$USE
    get_name "ESSID="; ESSID=$USE #This is what we name the AP via the config file
    get_name "STATION="; STATION=$USE
    get_name "LOCAL_BSSID="; LOCAL_BSSID=$USE
    get_name "CHAN="; CHAN=$USE
    get_name "BEACON="; BEACON=$USE
    get_name "PPS="; PPS=$USE
    get_name "AP="; UAP=$USE #This is how we determine access-point service type via the config file
    get_name "VICTIM_BSSID="; VICTIM_BSSID=$USE
    get_name "WPE_CONFIG="; WPE_CONFIG=$USE
    get_name "SECURITY_TYPE="; SECURITY_TYPE=$USE
    get_name "ENCRYPTION="; ENCRYPTION=$USE
    get_name "MONITOR_MODE="; MONITOR_MODE=$USE
    get_name "VERBOSE_LOGS="; VERBOSE_LOGS=$USE
    get_name "HOSTAPD_CONFIG="; HOSTAPD_CONFIG=$USE
    get_name "BRIDGED="; BRIDGED=$USE
    get_name "BRIDGE_NAME="; BRIDGE_NAME=$USE
    get_name "HASHCAT_TYPE="; HASHCAT_TYPE=$USE
    get_name "HASHCAT_LOCATION="; HASHCAT_LOCATION=$USE
    get_name "HASHCAT_MODE="; HASHCAT_MODE=$USE
    get_name "WORD_LIST="; WORD_LIST=$USE
    get_name "HASHCAT_RULES="; HASHCAT_RULES=$USE
    get_name "HASHCAT_THREADS="; HASHCAT_THREADS=$USE
    get_name "CRACK="; CRACK=$USE
    get_name "ATTACK="; ATTACK=$USE
    get_name "USE_VPN="; USE_VPN=$USE
    get_name "VPN_NAME="; VPN_NAME=$USE
    get_name "LEGACY_REGRESSION="; LEGACY_REGRESSION=$USE
    get_name "INTERFACE="; INTERFACE=$USE
    get_name "ARP_VICTIM="; ARP_VICTIM=$USE
    get_name "ETTERCAP_OPTIONS="; ETTERCAP_OPTIONS=$USE
    [[ $UAP == "HOSTAPD" ]] && AP=$IFACE1 || AP="at0" #This is the device name as per "ip addr"
    MON="${IFACE1}mon"
    IFACEBUG="0"
    VPN="tun0"
    VPNI="tap+"
    IPT="/sbin/iptables"
    LOG_METALOG="/var/log/everything/current"
    LOG_SYSLOG_NG="/var/log/dhcpd.log"
    FAILSAFE="th8934pjghwt74ygp"
    AP_GATEWAY=$(grep routers ${DIR_CONF}dhcpd.conf | awk -Frouters '{print $2}' | cut -d ';' -f 1 | cut -d ' ' -f 2)
    AP_SUBNET=$(grep netmask ${DIR_CONF}dhcpd.conf | awk -Fnetmask '{print $2}' | cut -d '{' -f 1 | cut -d ' ' -f 2 | cut -d ' ' -f 1)
    AP_IP=$(grep netmask ${DIR_CONF}dhcpd.conf | awk -Fnetmask '{print $1}' | cut -d ' ' -f 2)
    AP_BROADCAST=$(grep broadcast-address ${DIR_CONF}dhcpd.conf | awk -Fbroadcast-address '{print $2}' | cut -d ';' -f 1 | cut -d ' ' -f 2)
    # Text color variables
    TXT_UND=$(tput sgr 0 1) # Underline
    TXT_BLD=$(tput bold) # Bold
    BLD_RED=${txtbld}$(tput setaf 1) # red
    BLD_YEL=${txtbld}$(tput setaf 2) # Yellow
    BLD_ORA=${txtbld}$(tput setaf 3) # orange
    BLD_BLU=${txtbld}$(tput setaf 4) # blue
    BLD_PUR=${txtbld}$(tput setaf 5) # purple
    BLD_TEA=${txtbld}$(tput setaf 6) # teal
    BLD_WHT=${txtbld}$(tput setaf 7) # white
    EYES=$(tput setaf 6)
    TXT_RST=$(tput sgr0)             # Reset
    INFO=${BLD_WHT}*${TXT_RST}       # Feedback
    QUES=${BLD_BLU}?${TXT_RST}       # Questions
    PASS="${BLD_TEA}[${TXT_RSR}${BLD_WHT} OK ${TXT_RST}${BLD_TEA}]${TXT_RST}"
    WARN="${BLD_TEA}[${TXT_RST}${BLD_PUR} * ${TXT_RST}${BLD_TEA}]${TXT_RST}"
    # Start text with $BLD_YEL variable and end the text with $TXT_RST
}

keepalive()
{
    read -p "$WARN Press ctrl^c when you are ready to go down!${TXT_RST}" ALLINTHEFAMILY # Protect this script from going down hastily
    [[ $ALLINTHEFAMILY != 'SGFjayBUaGUgUGxhbmV0IQ==' ]] && clear; keepalive
}
