#!/bin/bash
###############################################
# Do all prerun variables and safety measures #
# before anything else starts happening       #
###############################################
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it's relativeness to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
source ${DIR}/userspace
depends

echo "ssid=N4P_Test_AP"
echo "interface=wlan2"
echo "beacon_int=100"
echo "driver=nl80211"
echo "channel=1"
echo "ctrl_interface=/var/run/hostapd"
echo "ctrl_interface_group=wheel"
echo "hw_mode=g"
echo "dtim_period=2"
echo "max_num_sta=2000"
echo "rts_threshold=2347"
echo "fragm_threshold=2346"
echo "macaddr_acl=0"
echo "auth_algs=3"
echo "ignore_broadcast_ssid=0"
echo "disassoc_low_ack=1"
echo "own_ip_addr=127.0.0.1"
echo "country_code=US"
echo "ignore_broadcast_ssid=0"
echo "wmm_enabled=1"
echo ""
echo "##### hostapd configuration file ##############################################"
echo "# Empty lines and lines starting with # are ignored"
echo ""
echo "# AP netdevice name (without 'ap' postfix, i.e., wlan0 uses wlan0ap for"
echo "# management frames); ath0 for madwifi"
echo "#interface=wlan1"
echo ""
echo "# In case of madwifi, atheros, and nl80211 driver interfaces, an additional"
echo "# configuration parameter, bridge, may be used to notify hostapd if the"
echo "# interface is included in a bridge. This parameter is not used with Host AP"
echo "# driver. If the bridge parameter is not set, the drivers will automatically"
echo "# figure out the bridge interface (assuming sysfs is enabled and mounted to"
echo "# /sys) and this parameter may not be needed."
echo "#"
echo "# For nl80211, this parameter can be used to request the AP interface to be"
echo "# added to the bridge automatically (brctl may refuse to do this before hostapd"
echo "# has been started to change the interface mode). If needed, the bridge"
echo "# interface is also created."
echo "#bridge=br0"
echo ""
echo "# Driver interface type (hostap/wired/madwifi/test/none/nl80211/bsd);"
echo "# default: hostap). nl80211 is used with all Linux mac80211 drivers."
echo "# Use driver=none if building hostapd as a standalone RADIUS server that does"
echo "# not control any wireless/wired driver."
echo "# driver=hostap"
echo "#driver=nl80211"
echo ""
echo "# hostapd event logger configuration"
echo "#"
echo "# Two output method: syslog and stdout (only usable if not forking to"
echo "# background)."
echo "#"
echo "# Module bitfield (ORed bitfield of modules that will be logged; -1 = all"
echo "# modules):"
echo "# bit 0 (1) = IEEE 802.11"
echo "# bit 1 (2) = IEEE 802.1X"
echo "# bit 2 (4) = RADIUS"
echo "# bit 3 (8) = WPA"
echo "# bit 4 (16) = driver interface"
echo "# bit 5 (32) = IAPP"
echo "# bit 6 (64) = MLME"
echo "#"
echo "# Levels (minimum value for logged events):"
echo "#  0 = verbose debugging"
echo "#  1 = debugging"
echo "#  2 = informational messages"
echo "#  3 = notification"
echo "#  4 = warning"
echo "#"
echo "logger_syslog=-1"
echo "logger_syslog_level=2"
echo "logger_stdout=-1"
echo "logger_stdout_level=2"
echo ""
echo "# Dump file for state information (on SIGUSR1)"
echo "#dump_file=/tmp/hostapd.dump"
echo ""
echo "# Interface for separate control program. If this is specified, hostapd"
echo "# will create this directory and a UNIX domain socket for listening to requests"
echo "# from external programs (CLI/GUI, etc.) for status information and"
echo "# configuration. The socket file will be named based on the interface name, so"
echo "# multiple hostapd processes/interfaces can be run at the same time if more"
echo "# than one interface is used."
echo "# /var/run/hostapd is the recommended directory for sockets and by default,"
echo "# hostapd_cli will use it when trying to connect with hostapd."
echo "#ctrl_interface=/var/run/hostapd"
echo ""
echo "# Access control for the control interface can be configured by setting the"
echo "# directory to allow only members of a group to use sockets. This way, it is"
echo "# possible to run hostapd as root (since it needs to change network"
echo "# configuration and open raw sockets) and still allow GUI/CLI components to be"
echo "# run as non-root users. However, since the control interface can be used to"
echo "# change the network configuration, this access needs to be protected in many"
echo "# cases. By default, hostapd is configured to use gid 0 (root). If you"
echo "# want to allow non-root users to use the contron interface, add a new group"
echo "# and change this value to match with that group. Add users that should have"
echo "# control interface access to this group."
echo "#"
echo "# This variable can be a group name or gid."
echo "#ctrl_interface_group=wheel"
echo "#ctrl_interface_group=0"
echo ""
echo ""
echo "##### IEEE 802.11 related configuration #######################################"
echo ""
echo "# SSID to be used in IEEE 802.11 management frames"
echo "#ssid=YouReallyWantToConnect"
echo ""
echo "# Alternative formats for configuring SSID"
echo "# (double quoted string, hexdump, printf-escaped string)"
echo "#ssid2="test""
echo "#ssid2=74657374"
echo "#ssid2=P"hellonthere""
echo ""
echo "# UTF-8 SSID: Whether the SSID is to be interpreted using UTF-8 encoding"
echo "#utf8_ssid=1"
echo ""
echo "# Country code (ISO/IEC 3166-1). Used to set regulatory domain."
echo "# Set as needed to indicate country in which device is operating."
echo "# This can limit available channels and transmit power."
echo "#country_code=US"
echo ""
echo "# Enable IEEE 802.11d. This advertises the country_code and the set of allowed"
echo "# channels and transmit power levels based on the regulatory limits. The"
echo "# country_code setting must be configured with the correct country for"
echo "# IEEE 802.11d functions."
echo "# (default: 0 = disabled)"
echo "#ieee80211d=1"
echo ""
echo "# Operation mode (a = IEEE 802.11a, b = IEEE 802.11b, g = IEEE 802.11g,"
echo "# ad = IEEE 802.11ad (60 GHz); a/g options are used with IEEE 802.11n, too, to"
echo "# specify band)"
echo "# Default: IEEE 802.11b"
echo "#hw_mode=b"
echo ""
echo "# Channel number (IEEE 802.11)"
echo "# (default: 0, i.e., not set)"
echo "# Please note that some drivers do not use this value from hostapd and the"
echo "# channel will need to be configured separately with iwconfig."
echo "#channel=6"
echo ""
echo "# Beacon interval in kus (1.024 ms) (default: 100; range 15..65535)"
echo "#beacon_int=100"
echo ""
echo "# DTIM (delivery traffic information message) period (range 1..255):"
echo "# number of beacons between DTIMs (1 = every beacon includes DTIM element)"
echo "# (default: 2)"
echo "#dtim_period=2"
echo ""
echo "# Maximum number of stations allowed in station table. New stations will be"
echo "# rejected after the station table is full. IEEE 802.11 has a limit of 2007"
echo "# different association IDs, so this number should not be larger than that."
echo "# (default: 2007)"
echo "#max_num_sta=255"
echo ""
echo "# RTS/CTS threshold; 2347 = disabled (default); range 0..2347"
echo "# If this field is not included in hostapd.conf, hostapd will not control"
echo "# RTS threshold and 'iwconfig wlan# rts <val>' can be used to set it."
echo "#rts_threshold=2347"
echo ""
echo "# Fragmentation threshold; 2346 = disabled (default); range 256..2346"
echo "# If this field is not included in hostapd.conf, hostapd will not control"
echo "# fragmentation threshold and 'iwconfig wlan# frag <val>' can be used to set"
echo "# it."
echo "#fragm_threshold=2346"
echo ""
echo "# Rate configuration"
echo "# Default is to enable all rates supported by the hardware. This configuration"
echo "# item allows this list be filtered so that only the listed rates will be left"
echo "# in the list. If the list is empty, all rates are used. This list can have"
echo "# entries that are not in the list of rates the hardware supports (such entries"
echo "# are ignored). The entries in this list are in 100 kbps, i.e., 11 Mbps = 110."
echo "# If this item is present, at least one rate have to be matching with the rates"
echo "# hardware supports."
echo "# default: use the most common supported rate setting for the selected"
echo "# hw_mode (i.e., this line can be removed from configuration file in most"
echo "# cases)"
echo "#supported_rates=10 20 55 110 60 90 120 180 240 360 480 540"
echo ""
echo "# Basic rate set configuration"
echo "# List of rates (in 100 kbps) that are included in the basic rate set."
echo "# If this item is not included, usually reasonable default set is used."
echo "#basic_rates=10 20"
echo "#basic_rates=10 20 55 110"
echo "#basic_rates=60 120 240"
echo ""
echo "# Short Preamble"
echo "# This parameter can be used to enable optional use of short preamble for"
echo "# frames sent at 2 Mbps, 5.5 Mbps, and 11 Mbps to improve network performance."
echo "# This applies only to IEEE 802.11b-compatible networks and this should only be"
echo "# enabled if the local hardware supports use of short preamble. If any of the"
echo "# associated STAs do not support short preamble, use of short preamble will be"
echo "# disabled (and enabled when such STAs disassociate) dynamically."
echo "# 0 = do not allow use of short preamble (default)"
echo "# 1 = allow use of short preamble"
echo "#preamble=1"
echo ""
echo "# Station MAC address -based authentication"
echo "# Please note that this kind of access control requires a driver that uses"
echo "# hostapd to take care of management frame processing and as such, this can be"
echo "# used with driver=hostap or driver=nl80211, but not with driver=madwifi."
echo "# 0 = accept unless in deny list"
echo "# 1 = deny unless in accept list"
echo "# 2 = use external RADIUS server (accept/deny lists are searched first)"
echo "#macaddr_acl=0"
echo ""
echo "# Accept/deny lists are read from separate files (containing list of"
echo "# MAC addresses, one per line). Use absolute path name to make sure that the"
echo "# files can be read on SIGHUP configuration reloads."
echo "#accept_mac_file=/etc/hostapd/hostapd.accept"
echo "#deny_mac_file=/etc/hostapd/hostapd.deny"
echo ""
echo "# IEEE 802.11 specifies two authentication algorithms. hostapd can be"
echo "# configured to allow both of these or only one. Open system authentication"
echo "# should be used with IEEE 802.1X."
echo "# Bit fields of allowed authentication algorithms:"
echo "# bit 0 = Open System Authentication"
echo "# bit 1 = Shared Key Authentication (requires WEP)"
echo "#auth_algs=0"
echo ""
echo "# Send empty SSID in beacons and ignore probe request frames that do not"
echo "# specify full SSID, i.e., require stations to know SSID."
echo "# default: disabled (0)"
echo "# 1 = send empty (length=0) SSID in beacon and ignore probe request for"
echo "#     broadcast SSID"
echo "# 2 = clear SSID (ASCII 0), but keep the original length (this may be required"
echo "#     with some clients that do not support empty SSID) and ignore probe"
echo "#     requests for broadcast SSID"
echo "#ignore_broadcast_ssid=0"
echo ""
echo "# Additional vendor specfic elements for Beacon and Probe Response frames"
echo "# This parameter can be used to add additional vendor specific element(s) into"
echo "# the end of the Beacon and Probe Response frames. The format for these"
echo "# element(s) is a hexdump of the raw information elements (id+len+payload for"
echo "# one or more elements)"
echo "#vendor_elements=dd0411223301"
echo ""
echo "# TX queue parameters (EDCF / bursting)"
echo "# tx_queue_<queue name>_<param>"
echo "# queues: data0, data1, data2, data3, after_beacon, beacon"
echo "#         (data0 is the highest priority queue)"
echo "# parameters:"
echo "#   aifs: AIFS (default 2)"
echo "#   cwmin: cwMin (1, 3, 7, 15, 31, 63, 127, 255, 511, 1023)"
echo "#   cwmax: cwMax (1, 3, 7, 15, 31, 63, 127, 255, 511, 1023); cwMax >= cwMin"
echo "#   burst: maximum length (in milliseconds with precision of up to 0.1 ms) for"
echo "#          bursting"
echo "#"
echo "# Default WMM parameters (IEEE 802.11 draft; 11-03-0504-03-000e):"
echo "# These parameters are used by the access point when transmitting frames"
echo "# to the clients."
echo "#"
echo "# Low priority / AC_BK = background"
echo "#tx_queue_data3_aifs=7"
echo "#tx_queue_data3_cwmin=15"
echo "#tx_queue_data3_cwmax=1023"
echo "#tx_queue_data3_burst=0"
echo "# Note: for IEEE 802.11b mode: cWmin=31 cWmax=1023 burst=0"
echo "#"
echo "# Normal priority / AC_BE = best effort"
echo "#tx_queue_data2_aifs=3"
echo "#tx_queue_data2_cwmin=15"
echo "#tx_queue_data2_cwmax=63"
echo "#tx_queue_data2_burst=0"
echo "# Note: for IEEE 802.11b mode: cWmin=31 cWmax=127 burst=0"
echo "#"
echo "# High priority / AC_VI = video"
echo "#tx_queue_data1_aifs=1"
echo "#tx_queue_data1_cwmin=7"
echo "#tx_queue_data1_cwmax=15"
echo "#tx_queue_data1_burst=3.0"
echo "# Note: for IEEE 802.11b mode: cWmin=15 cWmax=31 burst=6.0"
echo "#"
echo "# Highest priority / AC_VO = voice"
echo "#tx_queue_data0_aifs=1"
echo "#tx_queue_data0_cwmin=3"
echo "#tx_queue_data0_cwmax=7"
echo "#tx_queue_data0_burst=1.5"
echo "# Note: for IEEE 802.11b mode: cWmin=7 cWmax=15 burst=3.3"
echo ""
echo "# 802.1D Tag (= UP) to AC mappings"
echo "# WMM specifies following mapping of data frames to different ACs. This mapping"
echo "# can be configured using Linux QoS/tc and sch_pktpri.o module."
echo "# 802.1D Tag      802.1D Designation      Access Category WMM Designation"
echo "# 1               BK                      AC_BK           Background"
echo "# 2               -                       AC_BK           Background"
echo "# 0               BE                      AC_BE           Best Effort"
echo "# 3               EE                      AC_BE           Best Effort"
echo "# 4               CL                      AC_VI           Video"
echo "# 5               VI                      AC_VI           Video"
echo "# 6               VO                      AC_VO           Voice"
echo "# 7               NC                      AC_VO           Voice"
echo "# Data frames with no priority information: AC_BE"
echo "# Management frames: AC_VO"
echo "# PS-Poll frames: AC_BE"
echo ""
echo "# Default WMM parameters (IEEE 802.11 draft; 11-03-0504-03-000e):"
echo "# for 802.11a or 802.11g networks"
echo "# These parameters are sent to WMM clients when they associate."
echo "# The parameters will be used by WMM clients for frames transmitted to the"
echo "# access point."
echo "#"
echo "# note - txop_limit is in units of 32microseconds"
echo "# note - acm is admission control mandatory flag. 0 = admission control not"
echo "# required, 1 = mandatory"
echo "# note - here cwMin and cmMax are in exponent form. the actual cw value used"
echo "# will be (2^n)-1 where n is the value given here"
echo "#"
echo "#wmm_enabled=1"
echo "#"
echo "# WMM-PS Unscheduled Automatic Power Save Delivery [U-APSD]"
echo "# Enable this flag if U-APSD supported outside hostapd (eg., Firmware/driver)"
echo "#uapsd_advertisement_enabled=1"
echo "#"
echo "# Low priority / AC_BK = background"
echo "wmm_ac_bk_cwmin=4"
echo "wmm_ac_bk_cwmax=10"
echo "wmm_ac_bk_aifs=7"
echo "wmm_ac_bk_txop_limit=0"
echo "wmm_ac_bk_acm=0"
echo "# Note: for IEEE 802.11b mode: cWmin=5 cWmax=10"
echo "#"
echo "# Normal priority / AC_BE = best effort"
echo "wmm_ac_be_aifs=3"
echo "wmm_ac_be_cwmin=4"
echo "wmm_ac_be_cwmax=10"
echo "wmm_ac_be_txop_limit=0"
echo "wmm_ac_be_acm=0"
echo "# Note: for IEEE 802.11b mode: cWmin=5 cWmax=7"
echo "#"
echo "# High priority / AC_VI = video"
echo "wmm_ac_vi_aifs=2"
echo "wmm_ac_vi_cwmin=3"
echo "wmm_ac_vi_cwmax=4"
echo "wmm_ac_vi_txop_limit=94"
echo "wmm_ac_vi_acm=0"
echo "# Note: for IEEE 802.11b mode: cWmin=4 cWmax=5 txop_limit=188"
echo "#"
echo "# Highest priority / AC_VO = voice"
echo "wmm_ac_vo_aifs=2"
echo "wmm_ac_vo_cwmin=2"
echo "wmm_ac_vo_cwmax=3"
echo "wmm_ac_vo_txop_limit=47"
echo "wmm_ac_vo_acm=0"
echo "# Note: for IEEE 802.11b mode: cWmin=3 cWmax=4 burst=102"
echo ""
echo "# Static WEP key configuration"
echo "#"
echo "# The key number to use when transmitting."
echo "# It must be between 0 and 3, and the corresponding key must be set."
echo "# default: not set"
echo "#wep_default_key=0"
echo "# The WEP keys to use."
echo "# A key may be a quoted string or unquoted hexadecimal digits."
echo "# The key length should be 5, 13, or 16 characters, or 10, 26, or 32"
echo "# digits, depending on whether 40-bit (64-bit), 104-bit (128-bit), or"
echo "# 128-bit (152-bit) WEP is used."
echo "# Only the default key must be supplied; the others are optional."
echo "# default: not set"
echo "#wep_key0=123456789a"
echo "#wep_key1="vwxyz""
echo "#wep_key2=0102030405060708090a0b0c0d"
echo "#wep_key3=".2.4.6.8.0.23""
echo ""
echo "# Station inactivity limit"
echo "#"
echo "# If a station does not send anything in ap_max_inactivity seconds, an"
echo "# empty data frame is sent to it in order to verify whether it is"
echo "# still in range. If this frame is not ACKed, the station will be"
echo "# disassociated and then deauthenticated. This feature is used to"
echo "# clear station table of old entries when the STAs move out of the"
echo "# range."
echo "#"
echo "# The station can associate again with the AP if it is still in range;"
echo "# this inactivity poll is just used as a nicer way of verifying"
echo "# inactivity; i.e., client will not report broken connection because"
echo "# disassociation frame is not sent immediately without first polling"
echo "# the STA with a data frame."
echo "# default: 300 (i.e., 5 minutes)"
echo "#ap_max_inactivity=300"
echo "#"
echo "# The inactivity polling can be disabled to disconnect stations based on"
echo "# inactivity timeout so that idle stations are more likely to be disconnected"
echo "# even if they are still in range of the AP. This can be done by setting"
echo "# skip_inactivity_poll to 1 (default 0)."
echo "#skip_inactivity_poll=0"
echo ""
echo "# Disassociate stations based on excessive transmission failures or other"
echo "# indications of connection loss. This depends on the driver capabilities and"
echo "# may not be available with all drivers."
echo "#disassoc_low_ack=1"
echo ""
echo "# Maximum allowed Listen Interval (how many Beacon periods STAs are allowed to"
echo "# remain asleep). Default: 65535 (no limit apart from field size)"
echo "#max_listen_interval=100"
echo ""
echo "# WDS (4-address frame) mode with per-station virtual interfaces"
echo "# (only supported with driver=nl80211)"
echo "# This mode allows associated stations to use 4-address frames to allow layer 2"
echo "# bridging to be used."
echo "#wds_sta=1"
echo ""
echo "# If bridge parameter is set, the WDS STA interface will be added to the same"
echo "# bridge by default. This can be overridden with the wds_bridge parameter to"
echo "# use a separate bridge."
echo "#wds_bridge=wds-br0"
echo ""
echo "# Client isolation can be used to prevent low-level bridging of frames between"
echo "# associated stations in the BSS. By default, this bridging is allowed."
echo "#ap_isolate=1"
echo ""
echo "##### IEEE 802.11n related configuration ######################################"
echo ""
echo "# ieee80211n: Whether IEEE 802.11n (HT) is enabled"
echo "# 0 = disabled (default)"
echo "# 1 = enabled"
echo "# Note: You will also need to enable WMM for full HT functionality."
echo "#ieee80211n=1"
echo ""
echo "# ht_capab: HT capabilities (list of flags)"
echo "# LDPC coding capability: [LDPC] = supported"
echo "# Supported channel width set: [HT40-] = both 20 MHz and 40 MHz with secondary"
echo "# channel below the primary channel; [HT40+] = both 20 MHz and 40 MHz"
echo "# with secondary channel below the primary channel"
echo "# (20 MHz only if neither is set)"
echo "# Note: There are limits on which channels can be used with HT40- and"
echo "# HT40+. Following table shows the channels that may be available for"
echo "# HT40- and HT40+ use per IEEE 802.11n Annex J:"
echo "# freq            HT40-           HT40+"
echo "# 2.4 GHz         5-13            1-7 (1-9 in Europe/Japan)"
echo "# 5 GHz           40,48,56,64     36,44,52,60"
echo "# (depending on the location, not all of these channels may be available"
echo "# for use)"
echo "# Please note that 40 MHz channels may switch their primary and secondary"
echo "# channels if needed or creation of 40 MHz channel maybe rejected based"
echo "# on overlapping BSSes. These changes are done automatically when hostapd"
echo "# is setting up the 40 MHz channel."
echo "# Spatial Multiplexing (SM) Power Save: [SMPS-STATIC] or [SMPS-DYNAMIC]"
echo "# (SMPS disabled if neither is set)"
echo "# HT-greenfield: [GF] (disabled if not set)"
echo "# Short GI for 20 MHz: [SHORT-GI-20] (disabled if not set)"
echo "# Short GI for 40 MHz: [SHORT-GI-40] (disabled if not set)"
echo "# Tx STBC: [TX-STBC] (disabled if not set)"
echo "# Rx STBC: [RX-STBC1] (one spatial stream), [RX-STBC12] (one or two spatial"
echo "# streams), or [RX-STBC123] (one, two, or three spatial streams); Rx STBC"
echo "# disabled if none of these set"
echo "# HT-delayed Block Ack: [DELAYED-BA] (disabled if not set)"
echo "# Maximum A-MSDU length: [MAX-AMSDU-7935] for 7935 octets (3839 octets if not"
echo "# set)"
echo "# DSSS/CCK Mode in 40 MHz: [DSSS_CCK-40] = allowed (not allowed if not set)"
echo "# PSMP support: [PSMP] (disabled if not set)"
echo "# L-SIG TXOP protection support: [LSIG-TXOP-PROT] (disabled if not set)"
echo "#ht_capab=[HT40-][SHORT-GI-20][SHORT-GI-40]"
echo ""
echo "# Require stations to support HT PHY (reject association if they do not)"
echo "#require_ht=1"
echo ""
echo "##### IEEE 802.11ac related configuration #####################################"
echo ""
echo "# ieee80211ac: Whether IEEE 802.11ac (VHT) is enabled"
echo "# 0 = disabled (default)"
echo "# 1 = enabled"
echo "# Note: You will also need to enable WMM for full VHT functionality."
echo "#ieee80211ac=1"
echo ""
echo "# vht_capab: VHT capabilities (list of flags)"
echo "#"
echo "# vht_max_mpdu_len: [MAX-MPDU-7991] [MAX-MPDU-11454]"
echo "# Indicates maximum MPDU length"
echo "# 0 = 3895 octets (default)"
echo "# 1 = 7991 octets"
echo "# 2 = 11454 octets"
echo "# 3 = reserved"
echo "#"
echo "# supported_chan_width: [VHT160] [VHT160-80PLUS80]"
echo "# Indicates supported Channel widths"
echo "# 0 = 160 MHz & 80+80 channel widths are not supported (default)"
echo "# 1 = 160 MHz channel width is supported"
echo "# 2 = 160 MHz & 80+80 channel widths are supported"
echo "# 3 = reserved"
echo "#"
echo "# Rx LDPC coding capability: [RXLDPC]"
echo "# Indicates support for receiving LDPC coded pkts"
echo "# 0 = Not supported (default)"
echo "# 1 = Supported"
echo "#"
echo "# Short GI for 80 MHz: [SHORT-GI-80]"
echo "# Indicates short GI support for reception of packets transmitted with TXVECTOR"
echo "# params format equal to VHT and CBW = 80Mhz"
echo "# 0 = Not supported (default)"
echo "# 1 = Supported"
echo "#"
echo "# Short GI for 160 MHz: [SHORT-GI-160]"
echo "# Indicates short GI support for reception of packets transmitted with TXVECTOR"
echo "# params format equal to VHT and CBW = 160Mhz"
echo "# 0 = Not supported (default)"
echo "# 1 = Supported"
echo "#"
echo "# Tx STBC: [TX-STBC-2BY1]"
echo "# Indicates support for the transmission of at least 2x1 STBC"
echo "# 0 = Not supported (default)"
echo "# 1 = Supported"
echo "#"
echo "# Rx STBC: [RX-STBC-1] [RX-STBC-12] [RX-STBC-123] [RX-STBC-1234]"
echo "# Indicates support for the reception of PPDUs using STBC"
echo "# 0 = Not supported (default)"
echo "# 1 = support of one spatial stream"
echo "# 2 = support of one and two spatial streams"
echo "# 3 = support of one, two and three spatial streams"
echo "# 4 = support of one, two, three and four spatial streams"
echo "# 5,6,7 = reserved"
echo "#"
echo "# SU Beamformer Capable: [SU-BEAMFORMER]"
echo "# Indicates support for operation as a single user beamformer"
echo "# 0 = Not supported (default)"
echo "# 1 = Supported"
echo "#"
echo "# SU Beamformee Capable: [SU-BEAMFORMEE]"
echo "# Indicates support for operation as a single user beamformee"
echo "# 0 = Not supported (default)"
echo "# 1 = Supported"
echo "#"
echo "# Compressed Steering Number of Beamformer Antennas Supported: [BF-ANTENNA-2]"
echo "#   Beamformee's capability indicating the maximum number of beamformer"
echo "#   antennas the beamformee can support when sending compressed beamforming"
echo "#   feedback"
echo "# If SU beamformer capable, set to maximum value minus 1"
echo "# else reserved (default)"
echo "#"
echo "# Number of Sounding Dimensions: [SOUNDING-DIMENSION-2]"
echo "# Beamformer's capability indicating the maximum value of the NUM_STS parameter"
echo "# in the TXVECTOR of a VHT NDP"
echo "# If SU beamformer capable, set to maximum value minus 1"
echo "# else reserved (default)"
echo "#"
echo "# MU Beamformer Capable: [MU-BEAMFORMER]"
echo "# Indicates support for operation as an MU beamformer"
echo "# 0 = Not supported or sent by Non-AP STA (default)"
echo "# 1 = Supported"
echo "#"
echo "# MU Beamformee Capable: [MU-BEAMFORMEE]"
echo "# Indicates support for operation as an MU beamformee"
echo "# 0 = Not supported or sent by AP (default)"
echo "# 1 = Supported"
echo "#"
echo "# VHT TXOP PS: [VHT-TXOP-PS]"
echo "# Indicates whether or not the AP supports VHT TXOP Power Save Mode"
echo "#  or whether or not the STA is in VHT TXOP Power Save mode"
echo "# 0 = VHT AP doesnt support VHT TXOP PS mode (OR) VHT Sta not in VHT TXOP PS"
echo "#  mode"
echo "# 1 = VHT AP supports VHT TXOP PS mode (OR) VHT Sta is in VHT TXOP power save"
echo "#  mode"
echo "#"
echo "# +HTC-VHT Capable: [HTC-VHT]"
echo "# Indicates whether or not the STA supports receiving a VHT variant HT Control"
echo "# field."
echo "# 0 = Not supported (default)"
echo "# 1 = supported"
echo "#"
echo "# Maximum A-MPDU Length Exponent: [MAX-A-MPDU-LEN-EXP0]..[MAX-A-MPDU-LEN-EXP7]"
echo "# Indicates the maximum length of A-MPDU pre-EOF padding that the STA can recv"
echo "# This field is an integer in the range of 0 to 7."
echo "# The length defined by this field is equal to"
echo "# 2 pow(13 + Maximum A-MPDU Length Exponent) -1 octets"
echo "#"
echo "# VHT Link Adaptation Capable: [VHT-LINK-ADAPT2] [VHT-LINK-ADAPT3]"
echo "# Indicates whether or not the STA supports link adaptation using VHT variant"
echo "# HT Control field"
echo "# If +HTC-VHTcapable is 1"
echo "#  0 = (no feedback) if the STA does not provide VHT MFB (default)"
echo "#  1 = reserved"
echo "#  2 = (Unsolicited) if the STA provides only unsolicited VHT MFB"
echo "#  3 = (Both) if the STA can provide VHT MFB in response to VHT MRQ and if the"
echo "#      STA provides unsolicited VHT MFB"
echo "# Reserved if +HTC-VHTcapable is 0"
echo "#"
echo "# Rx Antenna Pattern Consistency: [RX-ANTENNA-PATTERN]"
echo "# Indicates the possibility of Rx antenna pattern change"
echo "# 0 = Rx antenna pattern might change during the lifetime of an association"
echo "# 1 = Rx antenna pattern does not change during the lifetime of an association"
echo "#"
echo "# Tx Antenna Pattern Consistency: [TX-ANTENNA-PATTERN]"
echo "# Indicates the possibility of Tx antenna pattern change"
echo "# 0 = Tx antenna pattern might change during the lifetime of an association"
echo "# 1 = Tx antenna pattern does not change during the lifetime of an association"
echo "#vht_capab=[SHORT-GI-80][HTC-VHT]"
echo "#"
echo "# Require stations to support VHT PHY (reject association if they do not)"
echo "#require_vht=1"
echo ""
echo "# 0 = 20 or 40 MHz operating Channel width"
echo "# 1 = 80 MHz channel width"
echo "# 2 = 160 MHz channel width"
echo "# 3 = 80+80 MHz channel width"
echo "#vht_oper_chwidth=1"
echo "#"
echo "# center freq = 5 GHz + (5 * index)"
echo "# So index 42 gives center freq 5.210 GHz"
echo "# which is channel 42 in 5G band"
echo "#"
echo "#vht_oper_centr_freq_seg0_idx=42"
echo "#"
echo "# center freq = 5 GHz + (5 * index)"
echo "# So index 159 gives center freq 5.795 GHz"
echo "# which is channel 159 in 5G band"
echo "#"
echo "#vht_oper_centr_freq_seg1_idx=159"
echo ""
echo "##### IEEE 802.1X-2004 related configuration ##################################"
echo ""
echo "# Require IEEE 802.1X authorization"
echo "#ieee8021x=1"
echo ""
echo "# IEEE 802.1X/EAPOL version"
echo "# hostapd is implemented based on IEEE Std 802.1X-2004 which defines EAPOL"
echo "# version 2. However, there are many client implementations that do not handle"
echo "# the new version number correctly (they seem to drop the frames completely)."
echo "# In order to make hostapd interoperate with these clients, the version number"
echo "# can be set to the older version (1) with this configuration value."
echo "#eapol_version=1"
echo ""
echo "# Optional displayable message sent with EAP Request-Identity. The first 0"
echo "# in this string will be converted to ASCII-0 (nul). This can be used to"
echo "# separate network info (comma separated list of attribute=value pairs); see,"
echo "# e.g., RFC 4284."
echo "#eap_message=hello"
echo "#eap_message=hello0networkid=netw,nasid=foo,portid=0,NAIRealms=example.com"
echo ""
echo "# WEP rekeying (disabled if key lengths are not set or are set to 0)"
echo "# Key lengths for default/broadcast and individual/unicast keys:"
echo "# 5 = 40-bit WEP (also known as 64-bit WEP with 40 secret bits)"
echo "# 13 = 104-bit WEP (also known as 128-bit WEP with 104 secret bits)"
echo "#wep_key_len_broadcast=5"
echo "#wep_key_len_unicast=5"
echo "# Rekeying period in seconds. 0 = do not rekey (i.e., set keys only once)"
echo "#wep_rekey_period=300"
echo ""
echo "# EAPOL-Key index workaround (set bit7) for WinXP Supplicant (needed only if"
echo "# only broadcast keys are used)"
echo "#eapol_key_index_workaround=0"
echo ""
echo "# EAP reauthentication period in seconds (default: 3600 seconds; 0 = disable"
echo "# reauthentication)."
echo "#eap_reauth_period=3600"
echo ""
echo "# Use PAE group address (01:80:c2:00:00:03) instead of individual target"
echo "# address when sending EAPOL frames with driver=wired. This is the most common"
echo "# mechanism used in wired authentication, but it also requires that the port"
echo "# is only used by one station."
echo "#use_pae_group_addr=1"
echo ""
echo "##### Integrated EAP server ###################################################"
echo ""
echo "# Optionally, hostapd can be configured to use an integrated EAP server"
echo "# to process EAP authentication locally without need for an external RADIUS"
echo "# server. This functionality can be used both as a local authentication server"
echo "# for IEEE 802.1X/EAPOL and as a RADIUS server for other devices."
echo ""
echo "# Use integrated EAP server instead of external RADIUS authentication"
echo "# server. This is also needed if hostapd is configured to act as a RADIUS"
echo "# authentication server."
echo "#eap_server=1"
echo ""
echo "# Path for EAP server user database"
echo "# If SQLite support is included, this can be set to "sqlite:/path/to/sqlite.db""
echo "# to use SQLite database instead of a text file."
echo "#eap_user_file=/etc/hostapd/hostapd.eap_user"
echo ""
echo "# CA certificate (PEM or DER file) for EAP-TLS/PEAP/TTLS"
echo "#ca_cert=/etc/hostapd/hostapd/gd-bundle.pem"
echo ""
echo "# Server certificate (PEM or DER file) for EAP-TLS/PEAP/TTLS"
echo "#server_cert=/etc/hostapd/hostapd/INTRANET.pem"
echo ""
echo "# Private key matching with the server certificate for EAP-TLS/PEAP/TTLS"
echo "# This may point to the same file as server_cert if both certificate and key"
echo "# are included in a single file. PKCS#12 (PFX) file (.p12/.pfx) can also be"
echo "# used by commenting out server_cert and specifying the PFX file as the"
echo "# private_key."
echo "#private_key=/etc/hostapd/hostapd/INTRANET.pem"
echo ""
echo "# Passphrase for private key"
echo "#private_key_passwd=TopSecretFoofusPassword"
echo ""
echo "# Enable CRL verification."
echo "# Note: hostapd does not yet support CRL downloading based on CDP. Thus, a"
echo "# valid CRL signed by the CA is required to be included in the ca_cert file."
echo "# This can be done by using PEM format for CA certificate and CRL and"
echo "# concatenating these into one file. Whenever CRL changes, hostapd needs to be"
echo "# restarted to take the new CRL into use."
echo "# 0 = do not verify CRLs (default)"
echo "# 1 = check the CRL of the user certificate"
echo "# 2 = check all CRLs in the certificate path"
echo "#check_crl=1"
echo ""
echo "# dh_file: File path to DH/DSA parameters file (in PEM format)"
echo "# This is an optional configuration file for setting parameters for an"
echo "# ephemeral DH key exchange. In most cases, the default RSA authentication does"
echo "# not use this configuration. However, it is possible setup RSA to use"
echo "# ephemeral DH key exchange. In addition, ciphers with DSA keys always use"
echo "# ephemeral DH keys. This can be used to achieve forward secrecy. If the file"
echo "# is in DSA parameters format, it will be automatically converted into DH"
echo "# params. This parameter is required if anonymous EAP-FAST is used."
echo "# You can generate DH parameters file with OpenSSL, e.g.,"
echo "# "openssl dhparam -out /etc/hostapd/hostapd.dh.pem 1024""
echo "#dh_file=/etc/hostapd/hostapd.dh.pem"
echo ""
echo "# Fragment size for EAP methods"
echo "#fragment_size=1400"
echo ""
echo "# Finite cyclic group for EAP-pwd. Number maps to group of domain parameters"
echo "# using the IANA repository for IKE (RFC 2409)."
echo "#pwd_group=19"
echo ""
echo "# Configuration data for EAP-SIM database/authentication gateway interface."
echo "# This is a text string in implementation specific format. The example"
echo "# implementation in eap_sim_db.c uses this as the UNIX domain socket name for"
echo "# the HLR/AuC gateway (e.g., hlr_auc_gw). In this case, the path uses "unix:""
echo "# prefix. If hostapd is built with SQLite support (CONFIG_SQLITE=y in .config),"
echo "# database file can be described with an optional db=<path> parameter."
echo "#eap_sim_db=unix:/tmp/hlr_auc_gw.sock"
echo "#eap_sim_db=unix:/tmp/hlr_auc_gw.sock db=/tmp/hostapd.db"
echo ""
echo "# Encryption key for EAP-FAST PAC-Opaque values. This key must be a secret,"
echo "# random value. It is configured as a 16-octet value in hex format. It can be"
echo "# generated, e.g., with the following command:"
echo "# od -tx1 -v -N16 /dev/random | colrm 1 8 | tr -d ' '"
echo "#pac_opaque_encr_key=000102030405060708090a0b0c0d0e0f"
echo ""
echo "# EAP-FAST authority identity (A-ID)"
echo "# A-ID indicates the identity of the authority that issues PACs. The A-ID"
echo "# should be unique across all issuing servers. In theory, this is a variable"
echo "# length field, but due to some existing implementations requiring A-ID to be"
echo "# 16 octets in length, it is strongly recommended to use that length for the"
echo "# field to provid interoperability with deployed peer implementations. This"
echo "# field is configured in hex format."
echo "#eap_fast_a_id=101112131415161718191a1b1c1d1e1f"
echo ""
echo "# EAP-FAST authority identifier information (A-ID-Info)"
echo "# This is a user-friendly name for the A-ID. For example, the enterprise name"
echo "# and server name in a human-readable format. This field is encoded as UTF-8."
echo "#eap_fast_a_id_info=test server"
echo ""
echo "# Enable/disable different EAP-FAST provisioning modes:"
echo "#0 = provisioning disabled"
echo "#1 = only anonymous provisioning allowed"
echo "#2 = only authenticated provisioning allowed"
echo "#3 = both provisioning modes allowed (default)"
echo "#eap_fast_prov=3"
echo ""
echo "# EAP-FAST PAC-Key lifetime in seconds (hard limit)"
echo "#pac_key_lifetime=604800"
echo ""
echo "# EAP-FAST PAC-Key refresh time in seconds (soft limit on remaining hard"
echo "# limit). The server will generate a new PAC-Key when this number of seconds"
echo "# (or fewer) of the lifetime remains."
echo "#pac_key_refresh_time=86400"
echo ""
echo "# EAP-SIM and EAP-AKA protected success/failure indication using AT_RESULT_IND"
echo "# (default: 0 = disabled)."
echo "#eap_sim_aka_result_ind=1"
echo ""
echo "# Trusted Network Connect (TNC)"
echo "# If enabled, TNC validation will be required before the peer is allowed to"
echo "# connect. Note: This is only used with EAP-TTLS and EAP-FAST. If any other"
echo "# EAP method is enabled, the peer will be allowed to connect without TNC."
echo "#tnc=1"
echo ""
echo ""
echo "##### IEEE 802.11f - Inter-Access Point Protocol (IAPP) #######################"
echo ""
echo "# Interface to be used for IAPP broadcast packets"
echo "#iapp_interface=eth0"
echo ""
echo ""
echo "##### RADIUS client configuration #############################################"
echo "# for IEEE 802.1X with external Authentication Server, IEEE 802.11"
echo "# authentication with external ACL for MAC addresses, and accounting"
echo ""
echo "# The own IP address of the access point (used as NAS-IP-Address)#"
echo "#own_ip_addr=127.0.0.1"
echo ""
echo "# Optional NAS-Identifier string for RADIUS messages. When used, this should be"
echo "# a unique to the NAS within the scope of the RADIUS server. For example, a"
echo "# fully qualified domain name can be used here."
echo "# When using IEEE 802.11r, nas_identifier must be set and must be between 1 and"
echo "# 48 octets long."
echo "#nas_identifier=ap.example.com"
echo ""
echo "# RADIUS authentication server"
echo "#auth_server_addr=127.0.0.1"
echo "#auth_server_port=1812"
echo "#auth_server_shared_secret=secret"
echo ""
echo "# RADIUS accounting server"
echo "#acct_server_addr=127.0.0.1"
echo "#acct_server_port=1813"
echo "#acct_server_shared_secret=secret"
echo ""
echo "# Secondary RADIUS servers; to be used if primary one does not reply to"
echo "# RADIUS packets. These are optional and there can be more than one secondary"
echo "# server listed."
echo "#auth_server_addr=127.0.0.2"
echo "#auth_server_port=1812"
echo "#auth_server_shared_secret=secret2"
echo "#"
echo "#acct_server_addr=127.0.0.2"
echo "#acct_server_port=1813"
echo "#acct_server_shared_secret=secret2"
echo ""
echo "# Retry interval for trying to return to the primary RADIUS server (in"
echo "# seconds). RADIUS client code will automatically try to use the next server"
echo "# when the current server is not replying to requests. If this interval is set,"
echo "# primary server will be retried after configured amount of time even if the"
echo "# currently used secondary server is still working."
echo "#radius_retry_primary_interval=600"
echo ""
echo ""
echo "# Interim accounting update interval"
echo "# If this is set (larger than 0) and acct_server is configured, hostapd will"
echo "# send interim accounting updates every N seconds. Note: if set, this overrides"
echo "# possible Acct-Interim-Interval attribute in Access-Accept message. Thus, this"
echo "# value should not be configured in hostapd.conf, if RADIUS server is used to"
echo "# control the interim interval."
echo "# This value should not be less 600 (10 minutes) and must not be less than"
echo "# 60 (1 minute)."
echo "#radius_acct_interim_interval=600"
echo ""
echo "# Request Chargeable-User-Identity (RFC 4372)"
echo "# This parameter can be used to configure hostapd to request CUI from the"
echo "# RADIUS server by including Chargeable-User-Identity attribute into"
echo "# Access-Request packets."
echo "#radius_request_cui=1"
echo ""
echo "# Dynamic VLAN mode; allow RADIUS authentication server to decide which VLAN"
echo "# is used for the stations. This information is parsed from following RADIUS"
echo "# attributes based on RFC 3580 and RFC 2868: Tunnel-Type (value 13 = VLAN),"
echo "# Tunnel-Medium-Type (value 6 = IEEE 802), Tunnel-Private-Group-ID (value"
echo "# VLANID as a string). vlan_file option below must be configured if dynamic"
echo "# VLANs are used. Optionally, the local MAC ACL list (accept_mac_file) can be"
echo "# used to set static client MAC address to VLAN ID mapping."
echo "# 0 = disabled (default)"
echo "# 1 = option; use default interface if RADIUS server does not include VLAN ID"
echo "# 2 = required; reject authentication if RADIUS server does not include VLAN ID"
echo "#dynamic_vlan=0"
echo ""
echo "# VLAN interface list for dynamic VLAN mode is read from a separate text file."
echo "# This list is used to map VLAN ID from the RADIUS server to a network"
echo "# interface. Each station is bound to one interface in the same way as with"
echo "# multiple BSSIDs or SSIDs. Each line in this text file is defining a new"
echo "# interface and the line must include VLAN ID and interface name separated by"
echo "# white space (space or tab)."
echo "#vlan_file=/etc/hostapd/hostapd.vlan"
echo ""
echo "# Interface where 802.1q tagged packets should appear when a RADIUS server is"
echo "# used to determine which VLAN a station is on.  hostapd creates a bridge for"
echo "# each VLAN.  Then hostapd adds a VLAN interface (associated with the interface"
echo "# indicated by 'vlan_tagged_interface') and the appropriate wireless interface"
echo "# to the bridge."
echo "#vlan_tagged_interface=eth0"
echo ""
echo "# When hostapd creates a VLAN interface on vlan_tagged_interfaces, it needs"
echo "# to know how to name it."
echo "# 0 = vlan<XXX>, e.g., vlan1"
echo "# 1 = <vlan_tagged_interface>.<XXX>, e.g. eth0.1"
echo "#vlan_naming=0"
echo ""
echo "# Arbitrary RADIUS attributes can be added into Access-Request and"
echo "# Accounting-Request packets by specifying the contents of the attributes with"
echo "# the following configuration parameters. There can be multiple of these to"
echo "# add multiple attributes. These parameters can also be used to override some"
echo "# of the attributes added automatically by hostapd."
echo "# Format: <attr_id>[:<syntax:value>]"
echo "# attr_id: RADIUS attribute type (e.g., 26 = Vendor-Specific)"
echo "# syntax: s = string (UTF-8), d = integer, x = octet string"
echo "# value: attribute value in format indicated by the syntax"
echo "# If syntax and value parts are omitted, a null value (single 0x00 octet) is"
echo "# used."
echo "#"
echo "# Additional Access-Request attributes"
echo "# radius_auth_req_attr=<attr_id>[:<syntax:value>]"
echo "# Examples:"
echo "# Operator-Name = "Operator""
echo "#radius_auth_req_attr=126:s:Operator"
echo "# Service-Type = Framed (2)"
echo "#radius_auth_req_attr=6:d:2"
echo "# Connect-Info = "testing" (this overrides the automatically generated value)"
echo "#radius_auth_req_attr=77:s:testing"
echo "# Same Connect-Info value set as a hexdump"
echo "#radius_auth_req_attr=77:x:74657374696e67"
echo ""
echo "#"
echo "# Additional Accounting-Request attributes"
echo "# radius_acct_req_attr=<attr_id>[:<syntax:value>]"
echo "# Examples:"
echo "# Operator-Name = "Operator""
echo "#radius_acct_req_attr=126:s:Operator"
echo ""
echo "# Dynamic Authorization Extensions (RFC 5176)"
echo "# This mechanism can be used to allow dynamic changes to user session based on"
echo "# commands from a RADIUS server (or some other disconnect client that has the"
echo "# needed session information). For example, Disconnect message can be used to"
echo "# request an associated station to be disconnected."
echo "#"
echo "# This is disabled by default. Set radius_das_port to non-zero UDP port"
echo "# number to enable."
echo "#radius_das_port=3799"
echo "#"
echo "# DAS client (the host that can send Disconnect/CoA requests) and shared secret"
echo "#radius_das_client=192.168.1.123 shared secret here"
echo "#"
echo "# DAS Event-Timestamp time window in seconds"
echo "#radius_das_time_window=300"
echo "#"
echo "# DAS require Event-Timestamp"
echo "#radius_das_require_event_timestamp=1"
echo ""
echo "##### RADIUS authentication server configuration ##############################"
echo ""
echo "# hostapd can be used as a RADIUS authentication server for other hosts. This"
echo "# requires that the integrated EAP server is also enabled and both"
echo "# authentication services are sharing the same configuration."
echo ""
echo "# File name of the RADIUS clients configuration for the RADIUS server. If this"
echo "# commented out, RADIUS server is disabled."
echo "#radius_server_clients=/etc/hostapd/hostapd.radius_clients"
echo ""
echo "# The UDP port number for the RADIUS authentication server"
echo "#radius_server_auth_port=1812"
echo ""
echo "# Use IPv6 with RADIUS server (IPv4 will also be supported using IPv6 API)"
echo "#radius_server_ipv6=1"
echo ""
echo ""
echo "##### WPA/IEEE 802.11i configuration ##########################################"
echo ""
echo "# Enable WPA. Setting this variable configures the AP to require WPA (either"
echo "# WPA-PSK or WPA-RADIUS/EAP based on other configuration). For WPA-PSK, either"
echo "# wpa_psk or wpa_passphrase must be set and wpa_key_mgmt must include WPA-PSK."
echo "# Instead of wpa_psk / wpa_passphrase, wpa_psk_radius might suffice."
echo "# For WPA-RADIUS/EAP, ieee8021x must be set (but without dynamic WEP keys),"
echo "# RADIUS authentication server must be configured, and WPA-EAP must be included"
echo "# in wpa_key_mgmt."
echo "# This field is a bit field that can be used to enable WPA (IEEE 802.11i/D3.0)"
echo "# and/or WPA2 (full IEEE 802.11i/RSN):"
echo "# bit0 = WPA"
echo "# bit1 = IEEE 802.11i/RSN (WPA2) (dot11RSNAEnabled)"
echo "#wpa=3"
echo ""
echo "# WPA pre-shared keys for WPA-PSK. This can be either entered as a 256-bit"
echo "# secret in hex format (64 hex digits), wpa_psk, or as an ASCII passphrase"
echo "# (8..63 characters) that will be converted to PSK. This conversion uses SSID"
echo "# so the PSK changes when ASCII passphrase is used and the SSID is changed."
echo "# wpa_psk (dot11RSNAConfigPSKValue)"
echo "# wpa_passphrase (dot11RSNAConfigPSKPassPhrase)"
echo "#wpa_psk=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
echo "#wpa_passphrase=secret passphrase"
echo ""
echo "# Optionally, WPA PSKs can be read from a separate text file (containing list"
echo "# of (PSK,MAC address) pairs. This allows more than one PSK to be configured."
echo "# Use absolute path name to make sure that the files can be read on SIGHUP"
echo "# configuration reloads."
echo "#wpa_psk_file=/etc/hostapd/hostapd.wpa_psk"
echo ""
echo "# Optionally, WPA passphrase can be received from RADIUS authentication server"
echo "# This requires macaddr_acl to be set to 2 (RADIUS)"
echo "# 0 = disabled (default)"
echo "# 1 = optional; use default passphrase/psk if RADIUS server does not include"
echo "# Tunnel-Password"
echo "# 2 = required; reject authentication if RADIUS server does not include"
echo "# Tunnel-Password"
echo "#wpa_psk_radius=0"
echo ""
echo "# Set of accepted key management algorithms (WPA-PSK, WPA-EAP, or both). The"
echo "# entries are separated with a space. WPA-PSK-SHA256 and WPA-EAP-SHA256 can be"
echo "# added to enable SHA256-based stronger algorithms."
echo "# (dot11RSNAConfigAuthenticationSuitesTable)"
echo "#wpa_key_mgmt=WPA-EAP"
echo ""
echo "# Set of accepted cipher suites (encryption algorithms) for pairwise keys"
echo "# (unicast packets). This is a space separated list of algorithms:"
echo "# CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]"
echo "# TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]"
echo "# Group cipher suite (encryption algorithm for broadcast and multicast frames)"
echo "# is automatically selected based on this configuration. If only CCMP is"
echo "# allowed as the pairwise cipher, group cipher will also be CCMP. Otherwise,"
echo "# TKIP will be used as the group cipher."
echo "# (dot11RSNAConfigPairwiseCiphersTable)"
echo "# Pairwise cipher for WPA (v1) (default: TKIP)"
echo "#wpa_pairwise=TKIP CCMP"
echo "# Pairwise cipher for RSN/WPA2 (default: use wpa_pairwise value)"
echo "#rsn_pairwise=CCMP"
echo ""
echo "# Time interval for rekeying GTK (broadcast/multicast encryption keys) in"
echo "# seconds. (dot11RSNAConfigGroupRekeyTime)"
echo "#wpa_group_rekey=600"
echo ""
echo "# Rekey GTK when any STA that possesses the current GTK is leaving the BSS."
echo "# (dot11RSNAConfigGroupRekeyStrict)"
echo "#wpa_strict_rekey=1"
echo ""
echo "# Time interval for rekeying GMK (master key used internally to generate GTKs"
echo "# (in seconds)."
echo "#wpa_gmk_rekey=86400"
echo ""
echo "# Maximum lifetime for PTK in seconds. This can be used to enforce rekeying of"
echo "# PTK to mitigate some attacks against TKIP deficiencies."
echo "#wpa_ptk_rekey=600"
echo ""
echo "# Enable IEEE 802.11i/RSN/WPA2 pre-authentication. This is used to speed up"
echo "# roaming be pre-authenticating IEEE 802.1X/EAP part of the full RSN"
echo "# authentication and key handshake before actually associating with a new AP."
echo "# (dot11RSNAPreauthenticationEnabled)"
echo "#rsn_preauth=1"
echo "#"
echo "# Space separated list of interfaces from which pre-authentication frames are"
echo "# accepted (e.g., 'eth0' or 'eth0 wlan0wds0'. This list should include all"
echo "# interface that are used for connections to other APs. This could include"
echo "# wired interfaces and WDS links. The normal wireless data interface towards"
echo "# associated stations (e.g., wlan0) should not be added, since"
echo "# pre-authentication is only used with APs other than the currently associated"
echo "# one."
echo "#rsn_preauth_interfaces=eth0"
echo ""
echo "# peerkey: Whether PeerKey negotiation for direct links (IEEE 802.11e) is"
echo "# allowed. This is only used with RSN/WPA2."
echo "# 0 = disabled (default)"
echo "# 1 = enabled"
echo "#peerkey=1"
echo ""
echo "# ieee80211w: Whether management frame protection (MFP) is enabled"
echo "# 0 = disabled (default)"
echo "# 1 = optional"
echo "# 2 = required"
echo "#ieee80211w=0"
echo ""
echo "# Association SA Query maximum timeout (in TU = 1.024 ms; for MFP)"
echo "# (maximum time to wait for a SA Query response)"
echo "# dot11AssociationSAQueryMaximumTimeout, 1...4294967295"
echo "#assoc_sa_query_max_timeout=1000"
echo ""
echo "# Association SA Query retry timeout (in TU = 1.024 ms; for MFP)"
echo "# (time between two subsequent SA Query requests)"
echo "# dot11AssociationSAQueryRetryTimeout, 1...4294967295"
echo "#assoc_sa_query_retry_timeout=201"
echo ""
echo "# disable_pmksa_caching: Disable PMKSA caching"
echo "# This parameter can be used to disable caching of PMKSA created through EAP"
echo "# authentication. RSN preauthentication may still end up using PMKSA caching if"
echo "# it is enabled (rsn_preauth=1)."
echo "# 0 = PMKSA caching enabled (default)"
echo "# 1 = PMKSA caching disabled"
echo "#disable_pmksa_caching=0"
echo ""
echo "# okc: Opportunistic Key Caching (aka Proactive Key Caching)"
echo "# Allow PMK cache to be shared opportunistically among configured interfaces"
echo "# and BSSes (i.e., all configurations within a single hostapd process)."
echo "# 0 = disabled (default)"
echo "# 1 = enabled"
echo "#okc=1"
echo ""
echo ""
echo "##### IEEE 802.11r configuration ##############################################"
echo ""
echo "# Mobility Domain identifier (dot11FTMobilityDomainID, MDID)"
echo "# MDID is used to indicate a group of APs (within an ESS, i.e., sharing the"
echo "# same SSID) between which a STA can use Fast BSS Transition."
echo "# 2-octet identifier as a hex string."
echo "#mobility_domain=a1b2"
echo ""
echo "# PMK-R0 Key Holder identifier (dot11FTR0KeyHolderID)"
echo "# 1 to 48 octet identifier."
echo "# This is configured with nas_identifier (see RADIUS client section above)."
echo ""
echo "# Default lifetime of the PMK-RO in minutes; range 1..65535"
echo "# (dot11FTR0KeyLifetime)"
echo "#r0_key_lifetime=10000"
echo ""
echo "# PMK-R1 Key Holder identifier (dot11FTR1KeyHolderID)"
echo "# 6-octet identifier as a hex string."
echo "#r1_key_holder=000102030405"
echo ""
echo "# Reassociation deadline in time units (TUs / 1.024 ms; range 1000..65535)"
echo "# (dot11FTReassociationDeadline)"
echo "#reassociation_deadline=1000"
echo ""
echo "# List of R0KHs in the same Mobility Domain"
echo "# format: <MAC address> <NAS Identifier> <128-bit key as hex string>"
echo "# This list is used to map R0KH-ID (NAS Identifier) to a destination MAC"
echo "# address when requesting PMK-R1 key from the R0KH that the STA used during the"
echo "# Initial Mobility Domain Association."
echo "#r0kh=02:01:02:03:04:05 r0kh-1.example.com 000102030405060708090a0b0c0d0e0f"
echo "#r0kh=02:01:02:03:04:06 r0kh-2.example.com 00112233445566778899aabbccddeeff"
echo "# And so on.. One line per R0KH."
echo ""
echo "# List of R1KHs in the same Mobility Domain"
echo "# format: <MAC address> <R1KH-ID> <128-bit key as hex string>"
echo "# This list is used to map R1KH-ID to a destination MAC address when sending"
echo "# PMK-R1 key from the R0KH. This is also the list of authorized R1KHs in the MD"
echo "# that can request PMK-R1 keys."
echo "#r1kh=02:01:02:03:04:05 02:11:22:33:44:55 000102030405060708090a0b0c0d0e0f"
echo "#r1kh=02:01:02:03:04:06 02:11:22:33:44:66 00112233445566778899aabbccddeeff"
echo "# And so on.. One line per R1KH."
echo ""
echo "# Whether PMK-R1 push is enabled at R0KH"
echo "# 0 = do not push PMK-R1 to all configured R1KHs (default)"
echo "# 1 = push PMK-R1 to all configured R1KHs whenever a new PMK-R0 is derived"
echo "#pmk_r1_push=1"
echo ""
echo "##### Neighbor table ##########################################################"
echo "# Maximum number of entries kept in AP table (either for neigbor table or for"
echo "# detecting Overlapping Legacy BSS Condition). The oldest entry will be"
echo "# removed when adding a new entry that would make the list grow over this"
echo "# limit. Note! WFA certification for IEEE 802.11g requires that OLBC is"
echo "# enabled, so this field should not be set to 0 when using IEEE 802.11g."
echo "# default: 255"
echo "#ap_table_max_size=255"
echo ""
echo "# Number of seconds of no frames received after which entries may be deleted"
echo "# from the AP table. Since passive scanning is not usually performed frequently"
echo "# this should not be set to very small value. In addition, there is no"
echo "# guarantee that every scan cycle will receive beacon frames from the"
echo "# neighboring APs."
echo "# default: 60"
echo "#ap_table_expiration_time=3600"
echo ""
echo ""
echo "##### Wi-Fi Protected Setup (WPS) #############################################"
echo ""
echo "# WPS state"
echo "# 0 = WPS disabled (default)"
echo "# 1 = WPS enabled, not configured"
echo "# 2 = WPS enabled, configured"
echo "#wps_state=2"
echo ""
echo "# AP can be configured into a locked state where new WPS Registrar are not"
echo "# accepted, but previously authorized Registrars (including the internal one)"
echo "# can continue to add new Enrollees."
echo "#ap_setup_locked=1"
echo ""
echo "# Universally Unique IDentifier (UUID; see RFC 4122) of the device"
echo "# This value is used as the UUID for the internal WPS Registrar. If the AP"
echo "# is also using UPnP, this value should be set to the device's UPnP UUID."
echo "# If not configured, UUID will be generated based on the local MAC address."
echo "#uuid=12345678-9abc-def0-1234-56789abcdef0"
echo ""
echo "# Note: If wpa_psk_file is set, WPS is used to generate random, per-device PSKs"
echo "# that will be appended to the wpa_psk_file. If wpa_psk_file is not set, the"
echo "# default PSK (wpa_psk/wpa_passphrase) will be delivered to Enrollees. Use of"
echo "# per-device PSKs is recommended as the more secure option (i.e., make sure to"
echo "# set wpa_psk_file when using WPS with WPA-PSK)."
echo ""
echo "# When an Enrollee requests access to the network with PIN method, the Enrollee"
echo "# PIN will need to be entered for the Registrar. PIN request notifications are"
echo "# sent to hostapd ctrl_iface monitor. In addition, they can be written to a"
echo "# text file that could be used, e.g., to populate the AP administration UI with"
echo "# pending PIN requests. If the following variable is set, the PIN requests will"
echo "# be written to the configured file."
echo "#wps_pin_requests=/var/run/hostapd_wps_pin_requests"
echo ""
echo "# Device Name"
echo "# User-friendly description of device; up to 32 octets encoded in UTF-8"
echo "#device_name=Wireless AP"
echo ""
echo "# Manufacturer"
echo "# The manufacturer of the device (up to 64 ASCII characters)"
echo "#manufacturer=Company"
echo ""
echo "# Model Name"
echo "# Model of the device (up to 32 ASCII characters)"
echo "#model_name=WAP"
echo ""
echo "# Model Number"
echo "# Additional device description (up to 32 ASCII characters)"
echo "#model_number=123"
echo ""
echo "# Serial Number"
echo "# Serial number of the device (up to 32 characters)"
echo "#serial_number=12345"
echo ""
echo "# Primary Device Type"
echo "# Used format: <categ>-<OUI>-<subcateg>"
echo "# categ = Category as an integer value"
echo "# OUI = OUI and type octet as a 4-octet hex-encoded value; 0050F204 for"
echo "#       default WPS OUI"
echo "# subcateg = OUI-specific Sub Category as an integer value"
echo "# Examples:"
echo "#   1-0050F204-1 (Computer / PC)"
echo "#   1-0050F204-2 (Computer / Server)"
echo "#   5-0050F204-1 (Storage / NAS)"
echo "#   6-0050F204-1 (Network Infrastructure / AP)"
echo "#device_type=6-0050F204-1"
echo ""
echo "# OS Version"
echo "# 4-octet operating system version number (hex string)"
echo "#os_version=01020300"
echo ""
echo "# Config Methods"
echo "# List of the supported configuration methods"
echo "# Available methods: usba ethernet label display ext_nfc_token int_nfc_token"
echo "# nfc_interface push_button keypad virtual_display physical_display"
echo "# virtual_push_button physical_push_button"
echo "#config_methods=label virtual_display virtual_push_button keypad"
echo ""
echo "# WPS capability discovery workaround for PBC with Windows 7"
echo "# Windows 7 uses incorrect way of figuring out AP's WPS capabilities by acting"
echo "# as a Registrar and using M1 from the AP. The config methods attribute in that"
echo "# message is supposed to indicate only the configuration method supported by"
echo "# the AP in Enrollee role, i.e., to add an external Registrar. For that case,"
echo "# PBC shall not be used and as such, the PushButton config method is removed"
echo "# from M1 by default. If pbc_in_m1=1 is included in the configuration file,"
echo "# the PushButton config method is left in M1 (if included in config_methods"
echo "# parameter) to allow Windows 7 to use PBC instead of PIN (e.g., from a label"
echo "# in the AP)."
echo "#pbc_in_m1=1"
echo ""
echo "# Static access point PIN for initial configuration and adding Registrars"
echo "# If not set, hostapd will not allow external WPS Registrars to control the"
echo "# access point. The AP PIN can also be set at runtime with hostapd_cli"
echo "# wps_ap_pin command. Use of temporary (enabled by user action) and random"
echo "# AP PIN is much more secure than configuring a static AP PIN here. As such,"
echo "# use of the ap_pin parameter is not recommended if the AP device has means for"
echo "# displaying a random PIN."
echo "#ap_pin=12345670"
echo ""
echo "# Skip building of automatic WPS credential"
echo "# This can be used to allow the automatically generated Credential attribute to"
echo "# be replaced with pre-configured Credential(s)."
echo "#skip_cred_build=1"
echo ""
echo "# Additional Credential attribute(s)"
echo "# This option can be used to add pre-configured Credential attributes into M8"
echo "# message when acting as a Registrar. If skip_cred_build=1, this data will also"
echo "# be able to override the Credential attribute that would have otherwise been"
echo "# automatically generated based on network configuration. This configuration"
echo "# option points to an external file that much contain the WPS Credential"
echo "# attribute(s) as binary data."
echo "#extra_cred=hostapd.cred"
echo ""
echo "# Credential processing"
echo "#   0 = process received credentials internally (default)"
echo "#   1 = do not process received credentials; just pass them over ctrl_iface to"
echo "# external program(s)"
echo "#   2 = process received credentials internally and pass them over ctrl_iface"
echo "# to external program(s)"
echo "# Note: With wps_cred_processing=1, skip_cred_build should be set to 1 and"
echo "# extra_cred be used to provide the Credential data for Enrollees."
echo "#"
echo "# wps_cred_processing=1 will disabled automatic updates of hostapd.conf file"
echo "# both for Credential processing and for marking AP Setup Locked based on"
echo "# validation failures of AP PIN. An external program is responsible on updating"
echo "# the configuration appropriately in this case."
echo "#wps_cred_processing=0"
echo ""
echo "# AP Settings Attributes for M7"
echo "# By default, hostapd generates the AP Settings Attributes for M7 based on the"
echo "# current configuration. It is possible to override this by providing a file"
echo "# with pre-configured attributes. This is similar to extra_cred file format,"
echo "# but the AP Settings attributes are not encapsulated in a Credential"
echo "# attribute."
echo "#ap_settings=hostapd.ap_settings"
echo ""
echo "# WPS UPnP interface"
echo "# If set, support for external Registrars is enabled."
echo "#upnp_iface=br0"
echo ""
echo "# Friendly Name (required for UPnP)"
echo "# Short description for end use. Should be less than 64 characters."
echo "#friendly_name=WPS Access Point"
echo ""
echo "# Manufacturer URL (optional for UPnP)"
echo "#manufacturer_url=http://www.example.com/"
echo ""
echo "# Model Description (recommended for UPnP)"
echo "# Long description for end user. Should be less than 128 characters."
echo "#model_description=Wireless Access Point"
echo ""
echo "# Model URL (optional for UPnP)"
echo "#model_url=http://www.example.com/model/"
echo ""
echo "# Universal Product Code (optional for UPnP)"
echo "# 12-digit, all-numeric code that identifies the consumer package."
echo "#upc=123456789012"
echo ""
echo "# WPS RF Bands (a = 5G, b = 2.4G, g = 2.4G, ag = dual band)"
echo "# This value should be set according to RF band(s) supported by the AP if"
echo "# hw_mode is not set. For dual band dual concurrent devices, this needs to be"
echo "# set to ag to allow both RF bands to be advertized."
echo "#wps_rf_bands=ag"
echo ""
echo "# NFC password token for WPS"
echo "# These parameters can be used to configure a fixed NFC password token for the"
echo "# AP. This can be generated, e.g., with nfc_pw_token from wpa_supplicant. When"
echo "# these parameters are used, the AP is assumed to be deployed with a NFC tag"
echo "# that includes the matching NFC password token (e.g., written based on the"
echo "# NDEF record from nfc_pw_token)."
echo "#"
echo "#wps_nfc_dev_pw_id: Device Password ID (16..65535)"
echo "#wps_nfc_dh_pubkey: Hexdump of DH Public Key"
echo "#wps_nfc_dh_privkey: Hexdump of DH Private Key"
echo "#wps_nfc_dev_pw: Hexdump of Device Password"
echo ""
echo "##### Wi-Fi Direct (P2P) ######################################################"
echo ""
echo "# Enable P2P Device management"
echo "#manage_p2p=1"
echo ""
echo "# Allow cross connection"
echo "#allow_cross_connection=1"
echo ""
echo "#### TDLS (IEEE 802.11z-2010) #################################################"
echo ""
echo "# Prohibit use of TDLS in this BSS"
echo "#tdls_prohibit=1"
echo ""
echo "# Prohibit use of TDLS Channel Switching in this BSS"
echo "#tdls_prohibit_chan_switch=1"
echo ""
echo "##### IEEE 802.11v-2011 #######################################################"
echo ""
echo "# Time advertisement"
echo "# 0 = disabled (default)"
echo "# 2 = UTC time at which the TSF timer is 0"
echo "#time_advertisement=2"
echo ""
echo "# Local time zone as specified in 8.3 of IEEE Std 1003.1-2004:"
echo "# stdoffset[dst[offset][,start[/time],end[/time]]]"
echo "#time_zone=EST5"
echo ""
echo "# WNM-Sleep Mode (extended sleep mode for stations)"
echo "# 0 = disabled (default)"
echo "# 1 = enabled (allow stations to use WNM-Sleep Mode)"
echo "#wnm_sleep_mode=1"
echo ""
echo "# BSS Transition Management"
echo "# 0 = disabled (default)"
echo "# 1 = enabled"
echo "#bss_transition=1"
echo ""
echo "##### IEEE 802.11u-2011 #######################################################"
echo ""
echo "# Enable Interworking service"
echo "#interworking=1"
echo ""
echo "# Access Network Type"
echo "# 0 = Private network"
echo "# 1 = Private network with guest access"
echo "# 2 = Chargeable public network"
echo "# 3 = Free public network"
echo "# 4 = Personal device network"
echo "# 5 = Emergency services only network"
echo "# 14 = Test or experimental"
echo "# 15 = Wildcard"
echo "#access_network_type=0"
echo ""
echo "# Whether the network provides connectivity to the Internet"
echo "# 0 = Unspecified"
echo "# 1 = Network provides connectivity to the Internet"
echo "#internet=1"
echo ""
echo "# Additional Step Required for Access"
echo "# Note: This is only used with open network, i.e., ASRA shall ne set to 0 if"
echo "# RSN is used."
echo "#asra=0"
echo ""
echo "# Emergency services reachable"
echo "#esr=0"
echo ""
echo "# Unauthenticated emergency service accessible"
echo "#uesa=0"
echo ""
echo "# Venue Info (optional)"
echo "# The available values are defined in IEEE Std 802.11u-2011, 7.3.1.34."
echo "# Example values (group,type):"
echo "# 0,0 = Unspecified"
echo "# 1,7 = Convention Center"
echo "# 1,13 = Coffee Shop"
echo "# 2,0 = Unspecified Business"
echo "# 7,1  Private Residence"
echo "#venue_group=7"
echo "#venue_type=1"
echo ""
echo "# Homogeneous ESS identifier (optional; dot11HESSID)"
echo "# If set, this shall be identifical to one of the BSSIDs in the homogeneous"
echo "# ESS and this shall be set to the same value across all BSSs in homogeneous"
echo "# ESS."
echo "#hessid=02:03:04:05:06:07"
echo ""
echo "# Roaming Consortium List"
echo "# Arbitrary number of Roaming Consortium OIs can be configured with each line"
echo "# adding a new OI to the list. The first three entries are available through"
echo "# Beacon and Probe Response frames. Any additional entry will be available only"
echo "# through ANQP queries. Each OI is between 3 and 15 octets and is configured as"
echo "# a hexstring."
echo "#roaming_consortium=021122"
echo "#roaming_consortium=2233445566"
echo ""
echo "# Venue Name information"
echo "# This parameter can be used to configure one or more Venue Name Duples for"
echo "# Venue Name ANQP information. Each entry has a two or three character language"
echo "# code (ISO-639) separated by colon from the venue name string."
echo "# Note that venue_group and venue_type have to be set for Venue Name"
echo "# information to be complete."
echo "#venue_name=eng:Example venue"
echo "#venue_name=fin:Esimerkkipaikka"
echo ""
echo "# Network Authentication Type"
echo "# This parameter indicates what type of network authentication is used in the"
echo "# network."
echo "# format: <network auth type indicator (1-octet hex str)> [redirect URL]"
echo "# Network Authentication Type Indicator values:"
echo "# 00 = Acceptance of terms and conditions"
echo "# 01 = On-line enrollment supported"
echo "# 02 = http/https redirection"
echo "# 03 = DNS redirection"
echo "#network_auth_type=00"
echo "#network_auth_type=02http://www.example.com/redirect/me/here/"
echo ""
echo "# IP Address Type Availability"
echo "# format: <1-octet encoded value as hex str>"
echo "# (ipv4_type & 0x3f) << 2 | (ipv6_type & 0x3)"
echo "# ipv4_type:"
echo "# 0 = Address type not available"
echo "# 1 = Public IPv4 address available"
echo "# 2 = Port-restricted IPv4 address available"
echo "# 3 = Single NATed private IPv4 address available"
echo "# 4 = Double NATed private IPv4 address available"
echo "# 5 = Port-restricted IPv4 address and single NATed IPv4 address available"
echo "# 6 = Port-restricted IPv4 address and double NATed IPv4 address available"
echo "# 7 = Availability of the address type is not known"
echo "# ipv6_type:"
echo "# 0 = Address type not available"
echo "# 1 = Address type available"
echo "# 2 = Availability of the address type not known"
echo "#ipaddr_type_availability=14"
echo ""
echo "# Domain Name"
echo "# format: <variable-octet str>[,<variable-octet str>]"
echo "#domain_name=example.com,another.example.com,yet-another.example.com"
echo ""
echo "# 3GPP Cellular Network information"
echo "# format: <MCC1,MNC1>[;<MCC2,MNC2>][;...]"
echo "#anqp_3gpp_cell_net=244,91;310,026;234,56"
echo ""
echo "# NAI Realm information"
echo "# One or more realm can be advertised. Each nai_realm line adds a new realm to"
echo "# the set. These parameters provide information for stations using Interworking"
echo "# network selection to allow automatic connection to a network based on"
echo "# credentials."
echo "# format: <encoding>,<NAI Realm(s)>[,<EAP Method 1>][,<EAP Method 2>][,...]"
echo "# encoding:"
echo "# 0 = Realm formatted in accordance with IETF RFC 4282"
echo "# 1 = UTF-8 formatted character string that is not formatted in"
echo "#     accordance with IETF RFC 4282"
echo "# NAI Realm(s): Semi-colon delimited NAI Realm(s)"
echo "# EAP Method: <EAP Method>[:<[AuthParam1:Val1]>][<[AuthParam2:Val2]>][...]"
echo "# AuthParam (Table 8-188 in IEEE Std 802.11-2012):"
echo "# ID 2 = Non-EAP Inner Authentication Type"
echo "# 1 = PAP, 2 = CHAP, 3 = MSCHAP, 4 = MSCHAPV2"
echo "# ID 3 = Inner authentication EAP Method Type"
echo "# ID 5 = Credential Type"
echo "# 1 = SIM, 2 = USIM, 3 = NFC Secure Element, 4 = Hardware Token,"
echo "# 5 = Softoken, 6 = Certificate, 7 = username/password, 9 = Anonymous,"
echo "# 10 = Vendor Specific"
echo "#nai_realm=0,example.com;example.net"
echo "# EAP methods EAP-TLS with certificate and EAP-TTLS/MSCHAPv2 with"
echo "# username/password"
echo "#nai_realm=0,example.org,13[5:6],21[2:4][5:7]"
echo ""
echo "##### Hotspot 2.0 #############################################################"
echo ""
echo "# Enable Hotspot 2.0 support"
echo "#hs20=1"
echo ""
echo "# Disable Downstream Group-Addressed Forwarding (DGAF)"
echo "# This can be used to configure a network where no group-addressed frames are"
echo "# allowed. The AP will not forward any group-address frames to the stations and"
echo "# random GTKs are issued for each station to prevent associated stations from"
echo "# forging such frames to other stations in the BSS."
echo "#disable_dgaf=1"
echo ""
echo "# Operator Friendly Name"
echo "# This parameter can be used to configure one or more Operator Friendly Name"
echo "# Duples. Each entry has a two or three character language code (ISO-639)"
echo "# separated by colon from the operator friendly name string."
echo "#hs20_oper_friendly_name=eng:Example operator"
echo "#hs20_oper_friendly_name=fin:Esimerkkioperaattori"
echo ""
echo "# Connection Capability"
echo "# This can be used to advertise what type of IP traffic can be sent through the"
echo "# hotspot (e.g., due to firewall allowing/blocking protocols/ports)."
echo "# format: <IP Protocol>:<Port Number>:<Status>"
echo "# IP Protocol: 1 = ICMP, 6 = TCP, 17 = UDP"
echo "# Port Number: 0..65535"
echo "# Status: 0 = Closed, 1 = Open, 2 = Unknown"
echo "# Each hs20_conn_capab line is added to the list of advertised tuples."
echo "#hs20_conn_capab=1:0:2"
echo "#hs20_conn_capab=6:22:1"
echo "#hs20_conn_capab=17:5060:0"
echo ""
echo "# WAN Metrics"
echo "# format: <WAN Info>:<DL Speed>:<UL Speed>:<DL Load>:<UL Load>:<LMD>"
echo "# WAN Info: B0-B1: Link Status, B2: Symmetric Link, B3: At Capabity"
echo "#    (encoded as two hex digits)"
echo "#    Link Status: 1 = Link up, 2 = Link down, 3 = Link in test state"
echo "# Downlink Speed: Estimate of WAN backhaul link current downlink speed in kbps;"
echo "# 1..4294967295; 0 = unknown"
echo "# Uplink Speed: Estimate of WAN backhaul link current uplink speed in kbps"
echo "# 1..4294967295; 0 = unknown"
echo "# Downlink Load: Current load of downlink WAN connection (scaled to 255 = 100%)"
echo "# Uplink Load: Current load of uplink WAN connection (scaled to 255 = 100%)"
echo "# Load Measurement Duration: Duration for measuring downlink/uplink load in"
echo "# tenths of a second (1..65535); 0 if load cannot be determined"
echo "#hs20_wan_metrics=01:8000:1000:80:240:3000"
echo ""
echo "# Operating Class Indication"
echo "# List of operating classes the BSSes in this ESS use. The Global operating"
echo "# classes in Table E-4 of IEEE Std 802.11-2012 Annex E define the values that"
echo "# can be used in this."
echo "# format: hexdump of operating class octets"
echo "# for example, operating classes 81 (2.4 GHz channels 1-13) and 115 (5 GHz"
echo "# channels 36-48):"
echo "#hs20_operating_class=5173"
echo ""
echo "##### Multiple BSSID support ##################################################"
echo "#"
echo "# Above configuration is using the default interface (wlan#, or multi-SSID VLAN"
echo "# interfaces). Other BSSIDs can be added by using separator 'bss' with"
echo "# default interface name to be allocated for the data packets of the new BSS."
echo "#"
echo "# hostapd will generate BSSID mask based on the BSSIDs that are"
echo "# configured. hostapd will verify that dev_addr & MASK == dev_addr. If this is"
echo "# not the case, the MAC address of the radio must be changed before starting"
echo "# hostapd (ifconfig wlan0 hw ether <MAC addr>). If a BSSID is configured for"
echo "# every secondary BSS, this limitation is not applied at hostapd and other"
echo "# masks may be used if the driver supports them (e.g., swap the locally"
echo "# administered bit)"
echo "#"
echo "# BSSIDs are assigned in order to each BSS, unless an explicit BSSID is"
echo "# specified using the 'bssid' parameter."
echo "# If an explicit BSSID is specified, it must be chosen such that it:"
echo "# - results in a valid MASK that covers it and the dev_addr"
echo "# - is not the same as the MAC address of the radio"
echo "# - is not the same as any other explicitly specified BSSID"
echo "#"
echo "# Please note that hostapd uses some of the values configured for the first BSS"
echo "# as the defaults for the following BSSes. However, it is recommended that all"
echo "# BSSes include explicit configuration of all relevant configuration items."
echo "#"
echo "#bss=wlan0_0"
echo "#ssid=test2"
echo "# most of the above items can be used here (apart from radio interface specific"
echo "# items, like channel)"
echo ""
echo "#bss=wlan0_1"
echo "#bssid=00:13:10:95:fe:0b"
echo "# ..."

hostapd /etc/n4p/hostapd.conf 2>&1
